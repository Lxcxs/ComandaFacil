generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int       @id @default(autoincrement())
  name         String
  email        String    @unique
  password     String
  document     String    @unique
  accountType  String
  createdAt    DateTime? @default(now())
  stores       Store[]
}

model Waiter {
  id             Int     @id @default(autoincrement())
  name           String
  email          String  @unique
  password       String
  accountType    String
  storeId        Int
  orders         Order[]
  tables         Table[]
  store          Store   @relation(fields: [storeId], references: [id])
}

model Store {
  id              Int            @id @default(autoincrement())
  name            String
  status          String
  image           String
  tableCount      Int
  userId          Int
  categories      Category[]
  customers       Customer[]
  items           Item[]
  orders          Order[]
  tables          Table[]
  customerTabs    CustomerTab[]
  waiters         Waiter[]
  owner           User           @relation(fields: [userId], references: [id])
}

model Category {
  id           Int    @id @default(autoincrement())
  name         String
  storeId      Int
  items        Item[]
  store        Store  @relation(fields: [storeId], references: [id])

  @@index([storeId])
}

model Item {
  id              Int      @id @default(autoincrement())
  name            String
  description     String
  price           Decimal  @db.Decimal(10, 2)
  status          String
  image           String
  categoryId      Int
  storeId         Int
  category        Category @relation(fields: [categoryId], references: [id])
  store           Store    @relation(fields: [storeId], references: [id])

  @@index([categoryId])
  @@index([storeId])
}

model Table {
  id              Int           @id @default(autoincrement())
  number          Int
  status          String
  peopleCount     Int
  storeId         Int
  waiterId        Int?
  customers       Customer[]
  orders          Order[]
  store           Store         @relation(fields: [storeId], references: [id])
  waiter          Waiter?       @relation(fields: [waiterId], references: [id])
  customerTabs    CustomerTab[]
}

model Customer {
  id              Int            @id @default(autoincrement())
  name            String
  tableNumber     Int
  accountType     String
  tableId         Int?
  storeId         Int
  status          String
  orders          Order[]
  tabs            CustomerTab[]
  table           Table?         @relation(fields: [tableId], references: [id])
  store           Store          @relation(fields: [storeId], references: [id])

  @@index([storeId])
}

model CustomerTab {
  id            Int      @id @default(autoincrement())
  value         Decimal  @db.Decimal(10, 2)
  status        String
  customerId    Int
  storeId       Int
  tableId       Int?
  orders        Order[]
  table         Table?   @relation(fields: [tableId], references: [id])
  customer      Customer @relation(fields: [customerId], references: [id])
  store         Store    @relation(fields: [storeId], references: [id])
}

model Order {
  id            Int           @id @default(autoincrement())
  itemName      String
  itemImage     String
  quantity      Int
  customerNote  String
  price         Decimal       @db.Decimal(10, 2)
  status        String
  isIndividual  Boolean
  guestName     String?
  createdAt     DateTime      @default(now())
  storeId       Int
  customerId    Int
  tableId       Int?
  customerTabId Int?
  customer      Customer      @relation(fields: [customerId], references: [id])
  table         Table?        @relation(fields: [tableId], references: [id])
  store         Store         @relation(fields: [storeId], references: [id])
  customerTab   CustomerTab?  @relation(fields: [customerTabId], references: [id])
  waiterId      Int?
  waiter        Waiter?       @relation(fields: [waiterId], references: [id])

  @@index([customerId])
  @@index([storeId])
}
