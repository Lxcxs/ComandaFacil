// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int              @id @default(autoincrement())
  userName        String
  userEmail       String           @unique
  userPassword    String
  userBrand       String
  userTableAmount Int
  userDocuments   Identification[]
  userCategories  Category[]
  userItems       Item[]
  orders          CostumerTab[]
  createdAt      DateTime?        @default(now())
}

model Identification {
  id     Int @id @default(autoincrement())
  type   String
  User   User?  @relation(fields: [userId], references: [id])
  userId Int?
}

model Category {
  id           Int    @id @default(autoincrement())
  categoryName String
  items        Item[]
  User         User?  @relation(fields: [userId], references: [id])
  userId       Int?
}

model Item {
  id              Int    @id @default(autoincrement())
  itemName        String
  itemDescription String
  itemValue       Int

  User       User?     @relation(fields: [userId], references: [id])
  userId     Int?
  Category   Category? @relation(fields: [categoryId], references: [id])
  categoryId Int?
}

model Costumer {
  id              Int           @id @default(autoincrement())
  costumerName    String
  userTable       Int
  userTableAmount Int
  userTabs        CostumerTab[]
}

model CostumerTab {
  id        Int    @id @default(autoincrement())
  tabStatus String
  order     String

  User       User?     @relation(fields: [userId], references: [id])
  userId     Int?
  Costumer   Costumer? @relation(fields: [costumerId], references: [id])
  costumerId Int?
}
